name: Build ImmortalWrt for MediaTek_MT7981_RFB

on:
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/build-MediaTek_MT7981_RFB.yml'
      - 'dts/wma301v2.dts'

jobs:
  build:
    name: Build MediaTek_MT7981_RFB firmware
    runs-on: ubuntu-latest
    env:
      TARGET: mediatek
      SUBTARGET: filogic
      DEVICE: MediaTek_MT7981_RFB
      DTS_FILENAME: wma301v2.dts
      DTS_TARGET_PATH: target/linux/mediatek/dts/
      MAX_SIZE: 52428800  # 基于闪存大小的限制（最大50MB）
      RELEASE_TAG: firmware-${{ github.ref_name }}-${{ github.sha_short }}-${{ github.run_number }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Clean up workspace and expand disk space
        run: |
          echo "=== 初始磁盘空间 ==="
          df -h
          
          # 移除不必要的软件包
          sudo apt purge -y \
            azure-cli \
            docker-ce docker-ce-cli containerd.io \
            google-cloud-sdk \
            kubectl \
            mysql-client \
            postgresql-client \
            mongodb-org \
            firefox \
            powershell \
            dotnet-sdk-* \
            openjdk-* \
            android-sdk-* \
            ghc-* \
            llvm-* \
            mono-* \
            php-* \
            ruby-* \
            2>/dev/null
          
          # 清理缓存和日志
          sudo apt clean
          sudo apt autoremove -y
          sudo rm -rf /var/lib/apt/lists/*
          sudo rm -rf /var/cache/apt/archives/*
          sudo rm -rf /var/log/*
          sudo rm -rf /tmp/*
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          
          # 扩展磁盘空间（GitHub Actions默认分区）
          sudo lvresize -l +100%FREE /dev/mapper/ubuntu--vg-ubuntu--lv
          sudo resize2fs /dev/mapper/ubuntu--vg-ubuntu--lv
          
          echo "=== 清理后的磁盘空间 ==="
          df -h

      - name: Prepare build environment
        run: |
          sudo apt update -y
          sudo apt install -y build-essential clang flex bison g++ gawk gcc-multilib \
              gettext git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev \
              file wget curl

      - name: Clone ImmortalWrt source
        run: |
          git clone --depth 1 https://github.com/immortalwrt/immortalwrt.git
          cd immortalwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Integrate custom DTS file
        run: |
          if [ ! -f "./dts/$DTS_FILENAME" ]; then
            echo "错误：未找到DTS文件，请确保在仓库根目录的dts文件夹中存在$DTS_FILENAME"
            exit 1
          fi
          
          mkdir -p "immortalwrt/$DTS_TARGET_PATH"
          cp "./dts/$DTS_FILENAME" "immortalwrt/$DTS_TARGET_PATH"
          echo "已将自定义DTS文件复制到："
          ls -l "immortalwrt/$DTS_TARGET_PATH$DTS_FILENAME"

      - name: Configure firmware
        run: |
          cd immortalwrt
          
          # 基础配置
          echo "CONFIG_TARGET_mediatek=y" >> .config
          echo "CONFIG_TARGET_mediatek_filogic=y" >> .config
          echo "CONFIG_TARGET_mediatek_filogic_DEVICE_MediaTek_MT7981_RFB=y" >> .config
          
          # 无线中继必备组件
          echo "CONFIG_PACKAGE_relayd=y" >> .config  # 中继核心组件
          echo "CONFIG_PACKAGE_wpad-basic-wolfssl=y" >> .config  # 无线认证
          echo "CONFIG_PACKAGE_iw=y" >> .config  # 无线配置工具
          echo "CONFIG_PACKAGE_hostapd-utils=y" >> .config  # AP模式工具
          
          # IPv6支持
          echo "CONFIG_PACKAGE_ipv6helper=y" >> .config  # IPv6辅助工具
          echo "CONFIG_PACKAGE_odhcp6c=y" >> .config  # IPv6客户端
          echo "CONFIG_PACKAGE_odhcpd-ipv6only=y" >> .config  # IPv6 DHCP服务器
          echo "CONFIG_PACKAGE_ip6tables=y" >> .config  # IPv6防火墙
          echo "CONFIG_PACKAGE_ip6tables-extra=y" >> .config  # IPv6防火墙扩展
          
          # 精简固件（适应闪存大小限制）
          echo "CONFIG_PACKAGE_dnsmasq-full=y" >> .config  # 替代默认dnsmasq（更小）
          echo "CONFIG_PACKAGE_dnsmasq=no" >> .config
          echo "CONFIG_STRIP_KERNEL_EXPORTS=y" >> .config  # 剥离内核符号
          echo "CONFIG_USE_MKLIBS=y" >> .config  # 精简库文件
          echo "CONFIG_SQUASHFS_COMPRESSION_XZ=y" >> .config  # 使用XZ高压缩
          echo "CONFIG_KERNEL_KALLSYMS=n" >> .config  # 禁用内核符号表
          
          # 禁用非必要组件
          echo "CONFIG_PACKAGE_luci=no" >> .config  # 移除Web界面（如需可开启）
          echo "CONFIG_PACKAGE_ppp=no" >> .config
          echo "CONFIG_PACKAGE_openvpn=no" >> .config
          echo "CONFIG_PACKAGE_vsftpd=no" >> .config
          echo "CONFIG_PACKAGE_samba4=no" >> .config
          
          # 生成最终配置
          make defconfig

      - name: Build firmware
        run: |
          cd immortalwrt
          make download -j$(nproc)
          make -j$(nproc) V=s

      - name: Check firmware size
        run: |
          cd immortalwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}
          FIRMWARE_FILE=$(find . -name "*.bin" | head -n 1)
          if [ -z "$FIRMWARE_FILE" ]; then
            echo "未找到固件文件"
            exit 1
          fi
          FILE_SIZE=$(stat -c%s "$FIRMWARE_FILE")
          echo "固件大小: $FILE_SIZE 字节"
          echo "固件限制: ${{ env.MAX_SIZE }} 字节"
          echo "FIRMWARE_FILE=$FIRMWARE_FILE" >> $GITHUB_ENV
          if [ $FILE_SIZE -gt ${{ env.MAX_SIZE }} ]; then
            echo "错误: 固件超过限制大小（${{ env.MAX_SIZE }}字节）"
            exit 1
          fi

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          release_name: ${{ env.DEVICE }} 固件 (${{ github.sha_short }})
          body: |
            自动构建的 ${{ env.DEVICE }} 固件
            - 基于 ImmortalWrt 最新源码
            - 包含无线中继和IPv6支持
            - 固件大小: ${{ env.FILE_SIZE }} 字节
            - 大小限制: ${{ env.MAX_SIZE }} 字节
            - 构建时间: ${{ github.event.head_commit.timestamp }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: immortalwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.FIRMWARE_FILE }}
          asset_name: ${{ env.DEVICE }}-firmware-${{ github.sha_short }}.bin
          asset_content_type: application/octet-stream
