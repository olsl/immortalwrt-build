name: Build ImmortalWRT Firmware for MediaTek MT7981 RFB

on:
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/**'
      - 'configs/**'
      - 'dts/**'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build Firmware
    runs-on: ubuntu-latest
    env:
      ARCH: aarch64
      DEVICE: MediaTek MT7981 RFB
      FLASH_SIZE: 128M
      DTS_FILE: wma301v2.dts
      
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: true

      - name: Prepare build environment
        run: |
          # Create DTS directory if it doesn't exist
          mkdir -p target/linux/${ARCH}/dts
          
          # Copy custom DTS file from repository root to the correct location
          echo "Copying DTS file: dts/${DTS_FILE}"
          if [ -f "dts/${DTS_FILE}" ]; then
            cp dts/${DTS_FILE} target/linux/${ARCH}/dts/
            echo "Successfully copied DTS file"
          else
            echo "Error: DTS file not found in repository root dts directory"
            exit 1
          fi

      - name: Update and install dependencies
        run: |
          sudo apt-get update
          sudo apt apt-get install -y build-essential clang flex bison g++ gawk             gcc-multilib gettext git libncurses5-dev libssl-dev python3-distutils             python3-pyelftools rsync unzip zlib1g-dev file wget

      - name: Update feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Generate default configuration
        run: |
          make defconfig

      - name: Build U-BOOT
        run: |
          # Build U-BOOT for the target architecture
          make -j$(nproc) uboot

      - name: Configure firmware features
        run: |
          # Load default configuration for the target
          echo "CONFIG_TARGET_armvirt_64=y" > .config
          echo "CONFIG_TARGET_DEVICE_device_generic=y" >> .config
          
          # Set flash size limit
          echo "CONFIG_TARGET_ROOTFS_PARTSIZE=128" >> .config
          
          # Enable basic system packages
          echo "CONFIG_PACKAGE_base-files=y" >> .config
          echo "CONFIG_PACKAGE_busybox=y" >> .config
          echo "CONFIG_PACKAGE_cgi-io=y" >> .config
          echo "CONFIG_PACKAGE_dropbear=y" >> .config
          echo "CONFIG_PACKAGE_firewall=y" >> .config
          echo "CONFIG_PACKAGE_fstools=y" >> .config
          echo "CONFIG_PACKAGE_ip6tables=y" >> .config
          echo "CONFIG_PACKAGE_iptables=y" >> .config
          echo "CONFIG_PACKAGE_kmod-ipt-offload=y" >> .config
          echo "CONFIG_PACKAGE_libc=y" >> .config
          echo "CONFIG_PACKAGE_libgcc=y" >> .config
          echo "CONFIG_PACKAGE_logd=y" >> .config
          echo "CONFIG_PACKAGE_mtd=y" >> .config
          echo "CONFIG_PACKAGE_netifd=y" >> .config
          echo "CONFIG_PACKAGE_odhcp6c=y" >> .config
          echo "CONFIG_PACKAGE_odhcpd-ipv6only=y" >> .config
          echo "CONFIG_PACKAGE_opkg=y" >> .config
          echo "CONFIG_PACKAGE_procd=y" >> .config
          echo "CONFIG_PACKAGE_procd-seccomp=y" >> .config
          echo "CONFIG_PACKAGE_procd-ujail=y" >> .config
          echo "CONFIG_PACKAGE_uci=y" >> .config
          echo "CONFIG_PACKAGE_uclient-fetch=y" >> .config
          echo "CONFIG_PACKAGE_urandom-seed=y" >> .config
          echo "CONFIG_PACKAGE_wpad-basic-mbedtls=y" >> .config
          
          # Enable/disable wireless relay
          echo "CONFIG_PACKAGE_relayd=y" >> .config
          echo "CONFIG_PACKAGE_wireless-tools=y" >> .config
          echo "CONFIG_PACKAGE_iw=y" >> .config
          echo "CONFIG_PACKAGE_hostapd-common=y" >> .config
          
          # Enable/disable IPv6
          echo "CONFIG_PACKAGE_ipv6helper=y" >> .config
          echo "CONFIG_PACKAGE_6relayd=y" >> .config
          echo "CONFIG_PACKAGE_ip6tables-extra=y" >> .config
          echo "CONFIG_PACKAGE_ip6tables-mod-nat=y" >> .config
          
          # Enable/disable Samba
          echo "CONFIG_PACKAGE_samba4-server=y" >> .config
          echo "CONFIG_PACKAGE_samba4-utils=y" >> .config
          echo "CONFIG_PACKAGE_kmod-fs-cifs=y" >> .config
          echo "CONFIG_PACKAGE_kmod-fs-nfs=y" >> .config
          echo "CONFIG_PACKAGE_kmod-fs-nfs-common=y" >> .config
          echo "CONFIG_PACKAGE_kmod-fs-nfs-v3=y" >> .config
          echo "CONFIG_PACKAGE_kmod-fs-nfs-v4=y" >> .config
          
          # Finalize configuration
          make defconfig

      - name: Build firmware
        run: |
          make -j$(nproc) V=s

      - name: Collect build artifacts
        run: |
          mkdir -p output/artifacts
          find bin/targets -name "*.bin" -o -name "*.img" -exec cp {} output/artifacts/ \;
          find bin/targets -name "u-boot-*.bin" -exec cp {} output/artifacts/ \;

      - name: Upload firmware artifacts
        uses: actions/upload-artifact@v4
        with:
          name: immortalwrt-firmware-MediaTek MT7981 RFB
          path: output/artifacts/
          retention-days: 30

      - name: Package firmware files
        run: |
          cd output/artifacts
          zip -r ../immortalwrt-firmware-MediaTek MT7981 RFB.zip .

      - name: List build results
        run: |
          echo "Build completed successfully!"
          echo "Firmware files are available as workflow artifacts."
          echo "List of generated files:"
          ls -l output/artifacts/
