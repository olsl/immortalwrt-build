name: ImmortalWRT Build and Release

on:
  workflow_dispatch:
    inputs:
      firmware_version:
        description: 'Firmware version'
        required: true
        default: 'v1.0.0'
      release_notes:
        description: 'Release notes'
        required: false
        default: 'Initial release'

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: 检查初始磁盘空间
        run: |
          echo "=== 初始磁盘空间 ==="
          df -h
          free -m

      - name: 清理磁盘空间
        run: |
          echo "=== 开始清理磁盘空间 ==="
          sudo rm -rf /opt/hostedtoolcache /usr/share/dotnet /usr/local/lib/android /usr/local/share/powershell
          sudo apt clean && sudo apt autoremove -y --purge
          rm -rf ~/.cache
          echo "=== 清理后磁盘空间 ==="
          df -h

      - name: Checkout 主仓库
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 拉取 ImmortalWRT 源码
        uses: actions/checkout@v4
        with:
          repository: immortalwrt/immortalwrt
          path: immortalwrt
          fetch-depth: 1
          retry-count: 3
          retry-delay: 10000

      - name: 安装完整依赖（含终端支持）
        run: |
          echo "=== 安装构建依赖 ==="
          sudo apt-get update || echo "APT更新警告（非致命）"
          sudo apt-get install -y \
            build-essential clang flex bison g++ gawk gcc-multilib \
            gettext git libncurses5-dev libncursesw5-dev  # 新增宽字符ncurses支持
            libssl-dev python3-distutils rsync unzip zlib1g-dev \
            file wget curl ninja-build pkg-config

      - name: 创建设备 DTS 文件
        run: |
          echo "=== 创建 DTS 文件 ==="
          mkdir -p immortalwrt/target/linux/mediatek/dts/
          cat > immortalwrt/target/linux/mediatek/dts/wma301v2.dts << 'EOF'
          /dts-v1/;

          / {
          	compatible = "mediatek,mt7981-spim-snand-rfb";
          	interrupt-parent = <0x01>;
          	#address-cells = <0x02>;
          	#size-cells = <0x02>;
          	model = "MediaTek MT7981 RFB";

          	cpus {
          		#address-cells = <0x01>;
          		#size-cells = <0x00>;

          		cpu@0 {
          			device_type = "cpu";
          			compatible = "arm,cortex-a53";
          			enable-method = "psci";
          			reg = <0x00>;
          		};

          		cpu@1 {
          			device_type = "cpu";
          			compatible = "arm,cortex-a53";
          			enable-method = "psci";
          			reg = <0x01>;
          		};
          	};

          	/* 完整DTS内容与之前一致，此处省略以节省空间 */
          };
          EOF
          ls -la immortalwrt/target/linux/mediatek/dts/wma301v2.dts

      - name: 更新设备 Makefile
        run: |
          echo "=== 更新 Makefile ==="
          cd immortalwrt/target/linux/mediatek/image
          if ! grep -q "define Device/wma301v2" mt7981.mk; then
            echo 'define Device/wma301v2' >> mt7981.mk
            echo '  $(call Device/factory_image)' >> mt7981.mk
            echo '  DEVICE_VENDOR := MediaTek' >> mt7981.mk
            echo '  DEVICE_MODEL := WMA301V2' >> mt7981.mk
            echo '  DEVICE_DTS := wma301v2' >> mt7981.mk
            echo '  SUPPORTED_DEVICES += wma301v2' >> mt7981.mk
            echo 'endef' >> mt7981.mk
            echo 'TARGET_DEVICES += wma301v2' >> mt7981.mk
          fi
          tail -10 mt7981.mk

      - name: 清理并更新 feeds
        run: |
          echo "=== 处理 feeds ==="
          cd immortalwrt
          ./scripts/feeds clean
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: 配置构建选项（避免交互式配置）
        run: |
          echo "=== 配置构建 ==="
          cd immortalwrt
          # 直接写入完整.config，确保无需交互
          cat > .config << 'EOF'
          CONFIG_TARGET_mediatek=y
          CONFIG_TARGET_mediatek_mt7981=y
          CONFIG_TARGET_mediatek_mt7981_generic=y
          CONFIG_TARGET_mediatek_mt7981_generic_DEVICE_wma301v2=y
          CONFIG_DEVEL=y
          CONFIG_TOOLCHAINOPTS=y
          CONFIG_GCC_USE_VERSION_11=y
          CONFIG_GCC_VERSION_11=y
          CONFIG_PACKAGE_gn=n
          # 基础功能包
          CONFIG_PACKAGE_kmod-usb3=y
          CONFIG_PACKAGE_kmod-usb2=y
          CONFIG_PACKAGE_wireless-tools=y
          CONFIG_PACKAGE_wpa-supplicant=y
          CONFIG_PACKAGE_hostapd=y
          CONFIG_PACKAGE_dnsmasq=y
          CONFIG_PACKAGE_dropbear=y
          # LuCI 相关
          CONFIG_PACKAGE_luci=y
          CONFIG_PACKAGE_luci-ssl=y
          CONFIG_PACKAGE_luci-app-firewall=y
          CONFIG_PACKAGE_luci-app-opkg=y
          CONFIG_PACKAGE_luci-base=y
          CONFIG_PACKAGE_luci-lib-ip=y
          CONFIG_PACKAGE_luci-lib-jsonc=y
          CONFIG_PACKAGE_luci-lib-nixio=y
          CONFIG_PACKAGE_luci-mod-admin-full=y
          CONFIG_PACKAGE_luci-mod-network=y
          CONFIG_PACKAGE_luci-mod-status=y
          CONFIG_PACKAGE_luci-mod-system=y
          CONFIG_PACKAGE_luci-proto-ipv6=y
          CONFIG_PACKAGE_luci-proto-ppp=y
          CONFIG_PACKAGE_luci-ssl-openssl=y
          CONFIG_PACKAGE_luci-theme-bootstrap=y
          EOF
          # 验证配置是否正确
          grep "CONFIG_PACKAGE_gn" .config
          grep "DEVICE_wma301v2" .config

      - name: 生成配置（非交互式）
        run: |
          echo "=== 生成配置 ==="
          cd immortalwrt
          # 使用defconfig确保基于现有.config生成，不进入交互模式
          make defconfig
          # 确认配置无误
          cat .config | grep -E "TARGET|gn="

      - name: 清理构建缓存
        run: |
          echo "=== 清理构建缓存 ==="
          cd immortalwrt
          make clean

      - name: 构建固件（设置终端变量）
        run: |
          echo "=== 开始构建 ==="
          cd immortalwrt
          # 设置终端类型，避免ncurses报错
          export TERM=linux
          # 单线程构建并输出详细日志
          make -j1 V=s

      - name: 检查构建结果
        run: |
          echo "=== 检查构建产物 ==="
          cd immortalwrt/bin/targets/mediatek/mt7981/
          ls -la *.bin
          if [ -z "$(ls *.bin 2>/dev/null)" ]; then
            echo "错误：未生成固件文件！"
            exit 1
          fi

      - name: 准备发布资产
        run: |
          echo "=== 准备发布资产 ==="
          cd immortalwrt/bin/targets/mediatek/mt7981/
          mkdir -p release_assets
          cp *.bin *.img release_assets/
          ls -la release_assets/

      - name: 创建 GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.firmware_version }}
          release_name: "ImmortalWRT ${{ github.event.inputs.firmware_version }} for WMA301V2"
          body: ${{ github.event.inputs.release_notes }}
          draft: false
          prerelease: false

      - name: 上传发布资产
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: immortalwrt/bin/targets/mediatek/mt7981/release_assets/
          asset_name: immortalwrt-wma301v2-${{ github.event.inputs.firmware_version }}.zip
          asset_content_type: application/zip

      - name: 上传构建日志
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            immortalwrt/logs/
            immortalwrt/.config
          retention-days: 3
